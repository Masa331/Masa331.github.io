<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>https://masa331.github.io/</link>
    <atom:link href="https://masa331.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 23 Oct 2015 21:30:52 +0200</pubDate>
    <lastBuildDate>Fri, 23 Oct 2015 21:30:52 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>SupTasks: Intro</title>
        <description>&lt;h1 id=&quot;suptasks-intro&quot;&gt;Suptasks: Intro&lt;/h1&gt;

&lt;p&gt;I always felt like if i would somehow measure time i spent on various work tasks i could then analyze it and eventually improve efficiency. In company i work for we manage our tasks through Redmine and our internall CRM. In both of them it’s possible to track spent time.&lt;/p&gt;

&lt;p&gt;The problem is it’s very very important to make this as much seamless as possible. Well that is important for all apps and tools in general but here it’s really big thing.&lt;/p&gt;

&lt;p&gt;Somethimes my morning looks like this. Following things happen in ten minutes together:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Me working on some deadline feature&lt;/li&gt;
  &lt;li&gt;New colleague of mine asks for another task&lt;/li&gt;
  &lt;li&gt;Bug report from production comes in&lt;/li&gt;
  &lt;li&gt;Another colleague asks someting about some part of system&lt;/li&gt;
  &lt;li&gt;Client calls for some help&lt;/li&gt;
  &lt;li&gt;And of course i’m late with 10 other things i promised to someone&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So now i need to fast switch between very different contexts. I don’t have time to track my time really. And i don’t remember it retrospectivelly.&lt;/p&gt;

&lt;p&gt;Neither of Redmine or our CRM offers this really. They are designated or optimized for something else.&lt;/p&gt;

&lt;h2 id=&quot;why-reinvent-the-wheel&quot;&gt;Why reinvent the wheel&lt;/h2&gt;

&lt;p&gt;There is a ton of these apps. But when it comes to web apps i’m often unhappy how they work. It might be some small thing in fact but as i’m a developer myself it’f kind of professional deformation and i just can’t get it out of my head. And when it’s such crucial to work it properly i decided to write it myself. After all i can be upset only on myself if it doesn’t work.&lt;/p&gt;

&lt;p&gt;And another reason - it will serve as a place where i can test all technology things which interests me.&lt;/p&gt;

&lt;p&gt;I released the code under MIT license.&lt;/p&gt;

&lt;p&gt;I Might blog about it here :)&lt;/p&gt;

&lt;p&gt;It’s here: &lt;a href=&quot;https://suptasks.com/&quot;&gt;https://suptasks.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And here: &lt;a href=&quot;https://github.com/Masa331/suptasks&quot;&gt;https://github.com/Masa331/suptasks&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 23 Oct 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/10/23/suptasks-intro.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/10/23/suptasks-intro.html</guid>
        
        
      </item>
    
      <item>
        <title>Make your CSV database faster</title>
        <description>&lt;h1 id=&quot;make-your-csv-database-faster&quot;&gt;Make your CSV database faster&lt;/h1&gt;

&lt;h2 id=&quot;rationale&quot;&gt;Rationale&lt;/h2&gt;

&lt;p&gt;I’m author of &lt;a href=&quot;https://github.com/Masa331/czech_name&quot;&gt;Czech name&lt;/a&gt; gem. Simply put it’s a database with more than 200k names. Names are stored in 4 CSV files, with the biggest having 100k items. Right now it’s terribly slow to get any name from it and it’s making the gem unusable.&lt;/p&gt;

&lt;p&gt;So i was thinking how to make it faster…  These are some ideas with benchmarks:&lt;/p&gt;

&lt;h2 id=&quot;code&quot;&gt;Code&lt;/h2&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/af4b8b0f8597d9f0bc43.js&quot;&gt; &lt;/script&gt;

&lt;h2 id=&quot;benchmarks&quot;&gt;Benchmarks&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;method&lt;/th&gt;
      &lt;th&gt;real&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Simple db, first name&lt;/td&gt;
      &lt;td&gt;(  0.000426)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Simple db, name in the middle&lt;/td&gt;
      &lt;td&gt;(  0.421385)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Simple db, last name&lt;/td&gt;
      &lt;td&gt;(  0.764998)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hash db, first name&lt;/td&gt;
      &lt;td&gt;(  0.955345)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hash db, name in the middle&lt;/td&gt;
      &lt;td&gt;(  0.000005)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Hash db, last name&lt;/td&gt;
      &lt;td&gt;(  0.000003)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Split db, first name in first part&lt;/td&gt;
      &lt;td&gt;(  0.000561)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Split db, last name in first part&lt;/td&gt;
      &lt;td&gt;(  0.435632)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Split db, first name in second part&lt;/td&gt;
      &lt;td&gt;(  0.819255)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Split db, last name in second part&lt;/td&gt;
      &lt;td&gt;(  0.835236)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Alphabet db, first name&lt;/td&gt;
      &lt;td&gt;(  0.000501)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Alphabet db, name in the middle&lt;/td&gt;
      &lt;td&gt;(  0.084445)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Alphabet db, last name&lt;/td&gt;
      &lt;td&gt;(  0.034563)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;YAML db, first name&lt;/td&gt;
      &lt;td&gt;(  1.707125)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;YAML db, last name&lt;/td&gt;
      &lt;td&gt;(  1.671748)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;result&quot;&gt;Result&lt;/h2&gt;

&lt;p&gt;Important thing to know is that the names are ordered from most to least used. Ok! Let’s get started.&lt;/p&gt;

&lt;p&gt;First of all &lt;strong&gt;Simple vs. Split&lt;/strong&gt; database. Initially i thought that if i split names in two files it will get faster but that’s not true at all. &lt;strong&gt;The speed is same&lt;/strong&gt;. What does it means? Well.. I guess the file is beeing read lazily? Nice! So it doesn’t matter how many files i have if i have to go through them all for the least used name. Also if i look at how long it takes to get middle name and last name, the speed is constant. Ok, that sounds logicall.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hash db&lt;/strong&gt; is blazingly fast. Once it’s in memory it beats everything. But the first access is slow. Unfortunatelly i think most of the time users will search only one name so they won’t profit from subsequent cache at all.. :(&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;YAML&lt;/strong&gt; is slow. And, for such simple data structure, the readability isn’t better than CSV.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Alphabet db&lt;/strong&gt; has some nice access times mostly the same for each item. Way better than one big file and the code is really simple yet powerful. It comes with a price of dependency on ActiveSupport and dozen of separate files  but that’s not so bad. I know it isn’t anything big and i’v probably seen it somewhere before but honestly, i’m proud of it :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Do you know about some other way access time could be improved over one big file?&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/09/01/csv-database-faster.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/09/01/csv-database-faster.html</guid>
        
        
      </item>
    
      <item>
        <title>Terminate PG connection</title>
        <description>&lt;h1 id=&quot;for-my-future-self&quot;&gt;For my future self&lt;/h1&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/cf521e02b29f2a22a49c.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Fri, 21 Aug 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/08/21/terminate_postgres_connections.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/08/21/terminate_postgres_connections.html</guid>
        
        
      </item>
    
      <item>
        <title>PHP vs. Ruby XML-RPC call</title>
        <description>&lt;h1 id=&quot;php-vs-ruby-xml-rpc-call&quot;&gt;PHP vs. Ruby XML-RPC call&lt;/h1&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/3015ea1e332d81900ecc.js&quot;&gt; &lt;/script&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/128ac4933f64086423b3.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Thu, 13 Aug 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/08/13/php-vs-ruby.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/08/13/php-vs-ruby.html</guid>
        
        
      </item>
    
      <item>
        <title>Basic Redis commands</title>
        <description>&lt;h1 id=&quot;for-my-future-self&quot;&gt;For my future self&lt;/h1&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/fa9efa580647fbefa59f.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Tue, 11 Aug 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/08/11/redis-basic.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/08/11/redis-basic.html</guid>
        
        
      </item>
    
      <item>
        <title>Use semicolon in IRB</title>
        <description>&lt;h1 id=&quot;with-semicolons-in-irb-or-pry-no-result-printing-happens&quot;&gt;With semicolons in IRB or PRY no result printing happens&lt;/h1&gt;

&lt;p&gt;Semicolons aren’t needed to end statements in Ruby. That’s same with IRB or PRY. So i’v never tried it.&lt;/p&gt;

&lt;p&gt;One day i accidentally wrote semicolon at the end of my PRY statement. What happend?:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/2c7eaef08b3039579de1.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Noticed how nothing was printed after second line? Normally you would get another &lt;code&gt;=&amp;gt; &quot;Fred&quot;&lt;/code&gt; line. With semicolon at the end no printing happens.&lt;/p&gt;

&lt;h2 id=&quot;when-its-actually-usefull&quot;&gt;When it’s actually usefull?&lt;/h2&gt;

&lt;p&gt;I work on a Rails project which uses PostgreSQL a lot. Sometimes when debugging i fire custom SQLs through ActiveRecord like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;conn = ActiveRecord::Base.connection
conn.execute(&#39;select 1;&#39;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The thing is when i assign connection into conn variable whole screen gets littered with connection info:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://masa331.github.io/assets/images/connection_angry_face.png&quot; alt=&quot;ActiveRecord connection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With semicolon at the end nothing like this happens and i don’t lose my context. :)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Neat!&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Aug 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/08/08/end-ruby-commands-with-colon.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/08/08/end-ruby-commands-with-colon.html</guid>
        
        
      </item>
    
      <item>
        <title>What is Enumerator?</title>
        <description>&lt;h1 id=&quot;what-is-enumerator&quot;&gt;What is Enumerator?&lt;/h1&gt;

&lt;p&gt;I started programming 2 years ago and i didn’t yet come to a situation when i would really need to know. But i was always curious because words like ‘Enumerator’ and ‘Enumerable’ were present from the very beggining. So let’s find out!&lt;/p&gt;

&lt;p&gt;Long story short:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Instances of &lt;code&gt;Enumerator&lt;/code&gt; class are used to wrap iterations and let’s you control the whole process.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;common-usage&quot;&gt;Common usage&lt;/h2&gt;
&lt;p&gt;You can get an Enumerator like this:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/73e58c3aabc14e235883.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This Enumerator instance wraps iteration over &lt;code&gt;[1, 2, 3]&lt;/code&gt;. We can start the actuall iteration with &lt;code&gt;#each&lt;/code&gt; method. It yields all items to given block:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/5ad7525544205ea5203a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It behaves exactly same as &lt;code&gt;[1, 2, 3].each { |number| puts number }&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;But you can also do this:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/4e405cd44d3adf0ffd0a.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Like this you can manually iterate over the collection one item after another. &lt;code&gt;StopIteration&lt;/code&gt; is raised when there are no more items. During the iteration, you can use &lt;code&gt;enum#peek&lt;/code&gt;, &lt;code&gt;enum#rewind&lt;/code&gt;, &lt;code&gt;enum#feed&lt;/code&gt; or others, which greatly improves controllability. &lt;strong&gt;With all these you can create your own iterators with custom logic.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;enumeratornew&quot;&gt;Enumerator.new&lt;/h2&gt;

&lt;p&gt;You can also create Enumerator with &lt;code&gt;Enumerator.new { |yielder| ... }&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Most simple example:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/dbe29eeb87de8d82a798.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This time enum doesn’t iterate over anything, but yields to given block &lt;strong&gt;all values you explicitly yield with &lt;code&gt;yielder.yield something&lt;/code&gt;&lt;/strong&gt;. In this example, only one value is yielded and it’s integer 1.&lt;/p&gt;

&lt;p&gt;To yield 1 ten times to given block so &lt;code&gt;enum.each { |item| puts item }&lt;/code&gt; will print 1 ten times on screen:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/0800bd3f36c6c7c04b31.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;And to yield infinetely:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/64f06bd6c61245c723e0.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;If you call &lt;code&gt;#each&lt;/code&gt; on this enum, it will never stop yielding and printing. But if you call &lt;code&gt;#next&lt;/code&gt;, it will yield only once and then stop.&lt;/p&gt;

&lt;p&gt;It’s only the implementation of &lt;code&gt;#each&lt;/code&gt; which calls &lt;code&gt;#next&lt;/code&gt; in loop and goes on forever because &lt;code&gt;StopIteration&lt;/code&gt;, is never raised.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Internally enum stops execution every time &lt;code&gt;#yield&lt;/code&gt; is called on yielder&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Try it with putting print statements before and after yield:&lt;/p&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/a8353c161157f626717c.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;This technique is also used in example from official &lt;a href=&quot;http://ruby-doc.org/core-2.2.0/Enumerator.html&quot;&gt;documentation&lt;/a&gt;, where infinite fibonacci sequence is generated.&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jul 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/26/ruby-enumerator.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/26/ruby-enumerator.html</guid>
        
        
      </item>
    
      <item>
        <title>How many symbols?</title>
        <description>&lt;h1 id=&quot;how-many-symbols-can-you-do&quot;&gt;How many symbols can you do?&lt;/h1&gt;

&lt;p&gt;So i’v been reading through Ruby 2.2 release notes and notice the new GC which also collects symbols.&lt;/p&gt;

&lt;p&gt;This is long time known problem in Rails world. Prior to Ruby 2.2 symbols weren’t garbage collected. So if you did somewhere create symbols from request params your app was vulnerable to DoS attacks. Google it if you want to know more.&lt;/p&gt;

&lt;p&gt;I found one of my app vulnerable… :) so i wanted to try it of course. I wanted to see how does it look if your server crashes because of that.&lt;/p&gt;

&lt;p&gt;It didn’t work out for some reason. I created simple script which was doing requests with different param from which symbols were created. But the server was just fine. I guess the request-response cycle is really slow or something.&lt;/p&gt;

&lt;p&gt;Well… it got me thinking. Do i really need to test it on Rails app? No! So i created simple ruby script:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9da2e21c708a5fe2512b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Of course you have to run this on Ruby &amp;lt; 2.2.&lt;/p&gt;

&lt;p&gt;After some time i realized it is really crappy metric because it depends on other processes using memory.&lt;/p&gt;

&lt;p&gt;But it was really fun with this excersise. Learned a few things…&lt;/p&gt;

&lt;p&gt;Note that at the end as your computer depletes all the memory and starts swapping the death by creating new symbols is really really slow. You can watch that in htop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But still… i can do about 27 000 000 symbols. What about you?&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/22/how-many-symbols.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/22/how-many-symbols.html</guid>
        
        
      </item>
    
      <item>
        <title>Keyboard shortcuts</title>
        <description>&lt;h1 id=&quot;define-keyboard-shortcuts&quot;&gt;Define keyboard shortcuts&lt;/h1&gt;

&lt;p&gt;Defining keyboard shortutcs in linux can be tricky. At least for me.&lt;/p&gt;

&lt;h2 id=&quot;xbindkeys&quot;&gt;Xbindkeys&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install ‘xbindkeys’. For me it’s &lt;code&gt;pacman -S xbindkeys&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create sample configuration file with &lt;code&gt;xbindkeys -d &amp;gt; ~/.xbindkeysrc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inspect it. The syntax is really simple. It consist of two line units&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Examples of volume control:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;amixer set Master toggle&quot;
  m:0x0 + c:121

&quot;amixer set Master 5%+&quot;
  m:0x0 + c:123

&quot;amixer set Master 5%-&quot;
  m:0x0 + c:122
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To-be-called &lt;strong&gt;command is on first line&lt;/strong&gt;. Invoking &lt;strong&gt;key combination on second line&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To get the right keycodes(the weird &lt;code&gt;m:0x0 + c:121&lt;/code&gt;) use &lt;code&gt;xbindkeys -k&lt;/code&gt; from terminal.&lt;/p&gt;

&lt;p&gt;White window pops up and when you press some key combination proper codes are printed to terminal.&lt;/p&gt;

&lt;p&gt;You can either use cryptic codes like me or nice readable ones. The nice readable ones weren’t working for me.&lt;/p&gt;

&lt;p&gt;Shortcuts will work after reboot.&lt;/p&gt;

&lt;h2 id=&quot;if-you-have-lxde-and-openboxlike-there-is-better-windows-manager-right&quot;&gt;If you have lxde and openbox(like there is better windows manager right..)&lt;/h2&gt;

&lt;p&gt;Then you can define keyboard shortcuts in openbox config.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open &lt;code&gt;~/.config/openbox/lxde-rc.xml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Grep for ‘Keyboard’. There are multiple types of shortcuts&lt;/li&gt;
  &lt;li&gt;It’s relatively easy to grasp&lt;/li&gt;
  &lt;li&gt;Most easy way is to copy existing commands and substitue your actions and shortcuts&lt;/li&gt;
  &lt;li&gt;Again they should be active after reboot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well actually openbox got a good documentation where you can read it all:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openbox.org/wiki/Help:Bindings&quot;&gt;http://openbox.org/wiki/Help:Bindings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openbox.org/wiki/Help:Actions&quot;&gt;http://openbox.org/wiki/Help:Actions&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/21/keyboard-shortcuts.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/21/keyboard-shortcuts.html</guid>
        
        
      </item>
    
      <item>
        <title>Configuring XTerm fonts</title>
        <description>&lt;h1 id=&quot;configuring-xterm-font&quot;&gt;Configuring XTerm font&lt;/h1&gt;

&lt;p&gt;XTerm can be widely configured with with use of &lt;code&gt;~/.Xresources&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Font particularly can be set with line &lt;code&gt;xterm*font [options]&lt;/code&gt;. For example mine looks like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xterm*font: -misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso10646-1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It configures different aspects of displayed font but it’s hard to generate(and understand) manually.&lt;/p&gt;

&lt;h2 id=&quot;pick-and-configure-with-xfontsel&quot;&gt;Pick and configure with xfontsel&lt;/h2&gt;

&lt;p&gt;Luckily there is a utility which really helps: &lt;code&gt;xfontsel&lt;/code&gt;. Start xfontsel, pick how your font should look like and copy and paste it into &lt;code&gt;~/.Xresources&lt;/code&gt;. The options string is automatically copied into your clipboard when you click on ‘select’ button.&lt;/p&gt;

&lt;h2 id=&quot;tinker-it-with-appress&quot;&gt;Tinker it with appress&lt;/h2&gt;

&lt;p&gt;However the end result in XTerm can be bit different than in xfontsel. It can be caused by some other settings from background to diacritics. Now it’s best to tinker the font look in XTerm itself. If you press ctrl and click with right mouse button anywhere in XTerm you get font setting menu. When you are done with configuring use program called &lt;code&gt;appres&lt;/code&gt;. With &lt;code&gt;$appres XTerm&lt;/code&gt; it prints out all display settings of given X application. Grep ‘font’ and look for ‘xterm*font’ line. Copy and paste it into your ~/.Xresources file and from now on you have nice XTerm font.&lt;/p&gt;

&lt;p&gt;Both xfontsel and appres should be commonly present in your package managers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:
The change will appear after reboot or if you call &lt;code&gt;$xrdb -load ~/.Xresources&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/17/configuring-xterm-fonts.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/17/configuring-xterm-fonts.html</guid>
        
        
      </item>
    
  </channel>
</rss>
