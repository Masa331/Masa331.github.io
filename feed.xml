<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Your awesome title</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>https://masa331.github.io/</link>
    <atom:link href="https://masa331.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 22 Jul 2015 17:28:23 +0200</pubDate>
    <lastBuildDate>Wed, 22 Jul 2015 17:28:23 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>How many symbols?</title>
        <description>&lt;h1 id=&quot;how-many-symbols-can-you-do&quot;&gt;How many symbols can you do?&lt;/h1&gt;

&lt;p&gt;So i’v been reading through Ruby 2.2 release notes and notice the new GC which also collects symbols.&lt;/p&gt;

&lt;p&gt;This is long time known problem in Rails world. Prior to Ruby 2.2 symbols weren’t garbage collected. So if you did somewhere create symbols from request params your app was vulnerable to DoS attacks. Google it if you want to know more.&lt;/p&gt;

&lt;p&gt;I found one of my app vulnerable… :) so i wanted to try it of course. I wanted to see how does it look if your server crashes because of that.&lt;/p&gt;

&lt;p&gt;It didn’t work out for some reason. I created simple script which was doing requests with different param from which symbols were created. But the server was just fine. I guess the request-response cycle is really slow or something.&lt;/p&gt;

&lt;p&gt;Well… it got me thinking. Do i really need to test it on Rails app? No! So i created simple ruby script:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9da2e21c708a5fe2512b.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Of course you have to run this on Ruby &amp;lt; 2.2.&lt;/p&gt;

&lt;p&gt;After some time i realized it is really crappy metric because it depends on other processes using memory.&lt;/p&gt;

&lt;p&gt;But it was really fun with this excersise. Learned a few things…&lt;/p&gt;

&lt;p&gt;Note that at the end as your computer depletes all the memory and starts swapping the death by creating new symbols is really really slow. You can watch that in htop.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But still… i can do about 27 000 000 symbols. What about you?&lt;/strong&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Jul 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/22/how-many-symbols.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/22/how-many-symbols.html</guid>
        
        
      </item>
    
      <item>
        <title>Keyboard shortcuts</title>
        <description>&lt;h1 id=&quot;define-keyboard-shortcuts&quot;&gt;Define keyboard shortcuts&lt;/h1&gt;

&lt;p&gt;Defining keyboard shortutcs in linux can be tricky. At least for me.&lt;/p&gt;

&lt;h2 id=&quot;xbindkeys&quot;&gt;Xbindkeys&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Install ‘xbindkeys’. For me it’s &lt;code&gt;pacman -S xbindkeys&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create sample configuration file with &lt;code&gt;xbindkeys -d &amp;gt; ~/.xbindkeysrc&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Inspect it. The syntax is really simple. It consist of two line units&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Examples of volume control:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;amixer set Master toggle&quot;
  m:0x0 + c:121

&quot;amixer set Master 5%+&quot;
  m:0x0 + c:123

&quot;amixer set Master 5%-&quot;
  m:0x0 + c:122
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To-be-called &lt;strong&gt;command is on first line&lt;/strong&gt;. Invoking &lt;strong&gt;key combination on second line&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To get the right keycodes(the weird &lt;code&gt;m:0x0 + c:121&lt;/code&gt;) use &lt;code&gt;xbindkeys -k&lt;/code&gt; from terminal.&lt;/p&gt;

&lt;p&gt;White window pops up and when you press some key combination proper codes are printed to terminal.&lt;/p&gt;

&lt;p&gt;You can either use cryptic codes like me or nice readable ones. The nice readable ones weren’t working for me.&lt;/p&gt;

&lt;p&gt;Shortcuts will work after reboot.&lt;/p&gt;

&lt;h2 id=&quot;if-you-have-lxde-and-openboxlike-there-is-better-windows-manager-right&quot;&gt;If you have lxde and openbox(like there is better windows manager right..)&lt;/h2&gt;

&lt;p&gt;Then you can define keyboard shortcuts in openbox config.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open &lt;code&gt;~/.config/openbox/lxde-rc.xml&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Grep for ‘Keyboard’. There are multiple types of shortcuts&lt;/li&gt;
  &lt;li&gt;It’s relatively easy to grasp&lt;/li&gt;
  &lt;li&gt;Most easy way is to copy existing commands and substitue your actions and shortcuts&lt;/li&gt;
  &lt;li&gt;Again they should be active after reboot&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Well actually openbox got a good documentation where you can read it all:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openbox.org/wiki/Help:Bindings&quot;&gt;http://openbox.org/wiki/Help:Bindings&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://openbox.org/wiki/Help:Actions&quot;&gt;http://openbox.org/wiki/Help:Actions&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/21/keyboard-shortcuts.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/21/keyboard-shortcuts.html</guid>
        
        
      </item>
    
      <item>
        <title>Configuring XTerm fonts</title>
        <description>&lt;h1 id=&quot;configuring-xterm-font&quot;&gt;Configuring XTerm font&lt;/h1&gt;

&lt;p&gt;XTerm can be widely configured with with use of &lt;code&gt;~/.Xresources&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Font particularly can be set with line &lt;code&gt;xterm*font [options]&lt;/code&gt;. For example mine looks like:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;xterm*font: -misc-fixed-medium-r-semicondensed--13-120-75-75-c-60-iso10646-1&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It configures different aspects of displayed font but it’s hard to generate(and understand) manually.&lt;/p&gt;

&lt;h2 id=&quot;pick-and-configure-with-xfontsel&quot;&gt;Pick and configure with xfontsel&lt;/h2&gt;

&lt;p&gt;Luckily there is a utility which really helps: &lt;code&gt;xfontsel&lt;/code&gt;. Start xfontsel, pick how your font should look like and copy and paste it into &lt;code&gt;~/.Xresources&lt;/code&gt;. The options string is automatically copied into your clipboard when you click on ‘select’ button.&lt;/p&gt;

&lt;h2 id=&quot;tinker-it-with-appress&quot;&gt;Tinker it with appress&lt;/h2&gt;

&lt;p&gt;However the end result in XTerm can be bit different than in xfontsel. It can be caused by some other settings from background to diacritics. Now it’s best to tinker the font look in XTerm itself. If you press ctrl and click with right mouse button anywhere in XTerm you get font setting menu. When you are done with configuring use program called &lt;code&gt;appres&lt;/code&gt;. With &lt;code&gt;$appres XTerm&lt;/code&gt; it prints out all display settings of given X application. Grep ‘font’ and look for ‘xterm*font’ line. Copy and paste it into your ~/.Xresources file and from now on you have nice XTerm font.&lt;/p&gt;

&lt;p&gt;Both xfontsel and appres should be commonly present in your package managers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;:
The change will appear after reboot or if you call &lt;code&gt;$xrdb -load ~/.Xresources&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2015 23:22:49 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/17/configuring-xterm-fonts.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/17/configuring-xterm-fonts.html</guid>
        
        
      </item>
    
      <item>
        <title>Hello world!</title>
        <description>&lt;h1 id=&quot;hello-world&quot;&gt;Hello World!&lt;/h1&gt;
&lt;p&gt;Hellow World&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Jul 2015 23:22:48 +0200</pubDate>
        <link>https://masa331.github.io/2015/07/17/hello-world.html</link>
        <guid isPermaLink="true">https://masa331.github.io/2015/07/17/hello-world.html</guid>
        
        
      </item>
    
  </channel>
</rss>
